# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregatePuzzle {
  avg: PuzzleAvgAggregate
  count: PuzzleCountAggregate
  max: PuzzleMaxAggregate
  min: PuzzleMinAggregate
  sum: PuzzleSumAggregate
}

type AggregatePuzzleInstance {
  avg: PuzzleInstanceAvgAggregate
  count: PuzzleInstanceCountAggregate
  max: PuzzleInstanceMaxAggregate
  min: PuzzleInstanceMinAggregate
  sum: PuzzleInstanceSumAggregate
}

type AggregateUser {
  count: UserCountAggregate
  max: UserMaxAggregate
  min: UserMinAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JsonFilter {
  equals: JSON
  not: JSON
}

type Mutation {
  createPuzzle(data: PuzzleCreateInput!): Puzzle!
  createPuzzleInstance(data: PuzzleInstanceCreateInput!): PuzzleInstance!
  createUser(data: UserCreateInput!): User!
  deleteManyPuzzle(where: PuzzleWhereInput): AffectedRowsOutput!
  deleteManyPuzzleInstance(where: PuzzleInstanceWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deletePuzzle(where: PuzzleWhereUniqueInput!): Puzzle
  deletePuzzleInstance(where: PuzzleInstanceWhereUniqueInput!): PuzzleInstance
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyPuzzle(data: PuzzleUpdateManyMutationInput!, where: PuzzleWhereInput): AffectedRowsOutput!
  updateManyPuzzleInstance(data: PuzzleInstanceUpdateManyMutationInput!, where: PuzzleInstanceWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updatePuzzle(data: PuzzleUpdateInput!, where: PuzzleWhereUniqueInput!): Puzzle
  updatePuzzleInstance(data: PuzzleInstanceUpdateInput!, where: PuzzleInstanceWhereUniqueInput!): PuzzleInstance
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertPuzzle(create: PuzzleCreateInput!, update: PuzzleUpdateInput!, where: PuzzleWhereUniqueInput!): Puzzle!
  upsertPuzzleInstance(create: PuzzleInstanceCreateInput!, update: PuzzleInstanceUpdateInput!, where: PuzzleInstanceWhereUniqueInput!): PuzzleInstance!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type MznModelInfo {
  instanceValid: Boolean!
  missingParameters: [String!]!
  modelValid: Boolean!
  outputVariables: [String!]!
  stderr: String!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Puzzle {
  author: User!
  authorId: String!
  createdAt: DateTime!
  description: JSON!
  id: Int!
  instances(cursor: PuzzleInstanceWhereUniqueInput, distinct: [PuzzleInstanceScalarFieldEnum!], orderBy: [PuzzleInstanceOrderByInput!], skip: Int, take: Int, where: PuzzleInstanceWhereInput): [PuzzleInstance!]!
  name: String!
  updatedAt: DateTime!
}

type PuzzleAvgAggregate {
  id: Float!
}

type PuzzleCountAggregate {
  _all: Int!
  authorId: Int
  createdAt: Int
  description: Int
  id: Int!
  name: Int
  updatedAt: Int
}

input PuzzleCreateInput {
  author: UserCreateNestedOneWithoutPuzzlesInput!
  createdAt: DateTime
  description: JSON!
  instances: PuzzleInstanceCreateNestedManyWithoutPuzzleInput
  name: String!
  updatedAt: DateTime
}

input PuzzleCreateNestedManyWithoutAuthorInput {
  connect: [PuzzleWhereUniqueInput!]
  connectOrCreate: [PuzzleCreateOrConnectWithoutAuthorInput!]
  create: [PuzzleCreateWithoutAuthorInput!]
}

input PuzzleCreateNestedOneWithoutInstancesInput {
  connect: PuzzleWhereUniqueInput
  connectOrCreate: PuzzleCreateOrConnectWithoutInstancesInput
  create: PuzzleCreateWithoutInstancesInput
}

input PuzzleCreateOrConnectWithoutAuthorInput {
  create: PuzzleCreateWithoutAuthorInput!
  where: PuzzleWhereUniqueInput!
}

input PuzzleCreateOrConnectWithoutInstancesInput {
  create: PuzzleCreateWithoutInstancesInput!
  where: PuzzleWhereUniqueInput!
}

input PuzzleCreateWithoutAuthorInput {
  createdAt: DateTime
  description: JSON!
  instances: PuzzleInstanceCreateNestedManyWithoutPuzzleInput
  name: String!
  updatedAt: DateTime
}

input PuzzleCreateWithoutInstancesInput {
  author: UserCreateNestedOneWithoutPuzzlesInput!
  createdAt: DateTime
  description: JSON!
  name: String!
  updatedAt: DateTime
}

type PuzzleInstance {
  User: User
  authorId: String
  createdAt: DateTime!
  id: String!
  parameters: JSON!
  puzzle: Puzzle
  puzzleId: Int
}

type PuzzleInstanceAvgAggregate {
  puzzleId: Float
}

type PuzzleInstanceCountAggregate {
  _all: Int!
  authorId: Int
  createdAt: Int
  id: Int
  parameters: Int
  puzzleId: Int
}

input PuzzleInstanceCreateInput {
  User: UserCreateNestedOneWithoutPuzzleInstancesInput
  createdAt: DateTime
  id: String!
  parameters: JSON!
  puzzle: PuzzleCreateNestedOneWithoutInstancesInput
}

input PuzzleInstanceCreateNestedManyWithoutPuzzleInput {
  connect: [PuzzleInstanceWhereUniqueInput!]
  connectOrCreate: [PuzzleInstanceCreateOrConnectWithoutPuzzleInput!]
  create: [PuzzleInstanceCreateWithoutPuzzleInput!]
}

input PuzzleInstanceCreateNestedManyWithoutUserInput {
  connect: [PuzzleInstanceWhereUniqueInput!]
  connectOrCreate: [PuzzleInstanceCreateOrConnectWithoutUserInput!]
  create: [PuzzleInstanceCreateWithoutUserInput!]
}

input PuzzleInstanceCreateOrConnectWithoutPuzzleInput {
  create: PuzzleInstanceCreateWithoutPuzzleInput!
  where: PuzzleInstanceWhereUniqueInput!
}

input PuzzleInstanceCreateOrConnectWithoutUserInput {
  create: PuzzleInstanceCreateWithoutUserInput!
  where: PuzzleInstanceWhereUniqueInput!
}

input PuzzleInstanceCreateWithoutPuzzleInput {
  User: UserCreateNestedOneWithoutPuzzleInstancesInput
  createdAt: DateTime
  id: String!
  parameters: JSON!
}

input PuzzleInstanceCreateWithoutUserInput {
  createdAt: DateTime
  id: String!
  parameters: JSON!
  puzzle: PuzzleCreateNestedOneWithoutInstancesInput
}

input PuzzleInstanceListRelationFilter {
  every: PuzzleInstanceWhereInput
  none: PuzzleInstanceWhereInput
  some: PuzzleInstanceWhereInput
}

type PuzzleInstanceMaxAggregate {
  authorId: String
  createdAt: DateTime
  id: String
  puzzleId: Int
}

type PuzzleInstanceMinAggregate {
  authorId: String
  createdAt: DateTime
  id: String
  puzzleId: Int
}

input PuzzleInstanceOrderByInput {
  User: UserOrderByInput
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  parameters: SortOrder
  puzzle: PuzzleOrderByInput
  puzzleId: SortOrder
}

enum PuzzleInstanceScalarFieldEnum {
  authorId
  createdAt
  id
  parameters
  puzzleId
}

input PuzzleInstanceScalarWhereInput {
  AND: [PuzzleInstanceScalarWhereInput!]
  NOT: [PuzzleInstanceScalarWhereInput!]
  OR: [PuzzleInstanceScalarWhereInput!]
  authorId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  parameters: JsonFilter
  puzzleId: IntNullableFilter
}

type PuzzleInstanceSumAggregate {
  puzzleId: Int
}

input PuzzleInstanceUpdateInput {
  User: UserUpdateOneWithoutPuzzleInstancesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parameters: JSON
  puzzle: PuzzleUpdateOneWithoutInstancesInput
}

input PuzzleInstanceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parameters: JSON
}

input PuzzleInstanceUpdateManyWithWhereWithoutPuzzleInput {
  data: PuzzleInstanceUpdateManyMutationInput!
  where: PuzzleInstanceScalarWhereInput!
}

input PuzzleInstanceUpdateManyWithWhereWithoutUserInput {
  data: PuzzleInstanceUpdateManyMutationInput!
  where: PuzzleInstanceScalarWhereInput!
}

input PuzzleInstanceUpdateManyWithoutPuzzleInput {
  connect: [PuzzleInstanceWhereUniqueInput!]
  connectOrCreate: [PuzzleInstanceCreateOrConnectWithoutPuzzleInput!]
  create: [PuzzleInstanceCreateWithoutPuzzleInput!]
  delete: [PuzzleInstanceWhereUniqueInput!]
  deleteMany: [PuzzleInstanceScalarWhereInput!]
  disconnect: [PuzzleInstanceWhereUniqueInput!]
  set: [PuzzleInstanceWhereUniqueInput!]
  update: [PuzzleInstanceUpdateWithWhereUniqueWithoutPuzzleInput!]
  updateMany: [PuzzleInstanceUpdateManyWithWhereWithoutPuzzleInput!]
  upsert: [PuzzleInstanceUpsertWithWhereUniqueWithoutPuzzleInput!]
}

input PuzzleInstanceUpdateManyWithoutUserInput {
  connect: [PuzzleInstanceWhereUniqueInput!]
  connectOrCreate: [PuzzleInstanceCreateOrConnectWithoutUserInput!]
  create: [PuzzleInstanceCreateWithoutUserInput!]
  delete: [PuzzleInstanceWhereUniqueInput!]
  deleteMany: [PuzzleInstanceScalarWhereInput!]
  disconnect: [PuzzleInstanceWhereUniqueInput!]
  set: [PuzzleInstanceWhereUniqueInput!]
  update: [PuzzleInstanceUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PuzzleInstanceUpdateManyWithWhereWithoutUserInput!]
  upsert: [PuzzleInstanceUpsertWithWhereUniqueWithoutUserInput!]
}

input PuzzleInstanceUpdateWithWhereUniqueWithoutPuzzleInput {
  data: PuzzleInstanceUpdateWithoutPuzzleInput!
  where: PuzzleInstanceWhereUniqueInput!
}

input PuzzleInstanceUpdateWithWhereUniqueWithoutUserInput {
  data: PuzzleInstanceUpdateWithoutUserInput!
  where: PuzzleInstanceWhereUniqueInput!
}

input PuzzleInstanceUpdateWithoutPuzzleInput {
  User: UserUpdateOneWithoutPuzzleInstancesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parameters: JSON
}

input PuzzleInstanceUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parameters: JSON
  puzzle: PuzzleUpdateOneWithoutInstancesInput
}

input PuzzleInstanceUpsertWithWhereUniqueWithoutPuzzleInput {
  create: PuzzleInstanceCreateWithoutPuzzleInput!
  update: PuzzleInstanceUpdateWithoutPuzzleInput!
  where: PuzzleInstanceWhereUniqueInput!
}

input PuzzleInstanceUpsertWithWhereUniqueWithoutUserInput {
  create: PuzzleInstanceCreateWithoutUserInput!
  update: PuzzleInstanceUpdateWithoutUserInput!
  where: PuzzleInstanceWhereUniqueInput!
}

input PuzzleInstanceWhereInput {
  AND: [PuzzleInstanceWhereInput!]
  NOT: [PuzzleInstanceWhereInput!]
  OR: [PuzzleInstanceWhereInput!]
  User: UserRelationFilter
  authorId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  parameters: JsonFilter
  puzzle: PuzzleRelationFilter
  puzzleId: IntNullableFilter
}

input PuzzleInstanceWhereUniqueInput {
  id: String
  parameters: JSON
}

input PuzzleListRelationFilter {
  every: PuzzleWhereInput
  none: PuzzleWhereInput
  some: PuzzleWhereInput
}

type PuzzleMaxAggregate {
  authorId: String
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

type PuzzleMinAggregate {
  authorId: String
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input PuzzleOrderByInput {
  author: UserOrderByInput
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input PuzzleRelationFilter {
  is: PuzzleWhereInput
  isNot: PuzzleWhereInput
}

enum PuzzleScalarFieldEnum {
  authorId
  createdAt
  description
  id
  name
  updatedAt
}

input PuzzleScalarWhereInput {
  AND: [PuzzleScalarWhereInput!]
  NOT: [PuzzleScalarWhereInput!]
  OR: [PuzzleScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  description: JsonFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

type PuzzleSumAggregate {
  id: Int!
}

input PuzzleUpdateInput {
  author: UserUpdateOneRequiredWithoutPuzzlesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: JSON
  instances: PuzzleInstanceUpdateManyWithoutPuzzleInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PuzzleUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PuzzleUpdateManyWithWhereWithoutAuthorInput {
  data: PuzzleUpdateManyMutationInput!
  where: PuzzleScalarWhereInput!
}

input PuzzleUpdateManyWithoutAuthorInput {
  connect: [PuzzleWhereUniqueInput!]
  connectOrCreate: [PuzzleCreateOrConnectWithoutAuthorInput!]
  create: [PuzzleCreateWithoutAuthorInput!]
  delete: [PuzzleWhereUniqueInput!]
  deleteMany: [PuzzleScalarWhereInput!]
  disconnect: [PuzzleWhereUniqueInput!]
  set: [PuzzleWhereUniqueInput!]
  update: [PuzzleUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PuzzleUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PuzzleUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PuzzleUpdateOneWithoutInstancesInput {
  connect: PuzzleWhereUniqueInput
  connectOrCreate: PuzzleCreateOrConnectWithoutInstancesInput
  create: PuzzleCreateWithoutInstancesInput
  delete: Boolean
  disconnect: Boolean
  update: PuzzleUpdateWithoutInstancesInput
  upsert: PuzzleUpsertWithoutInstancesInput
}

input PuzzleUpdateWithWhereUniqueWithoutAuthorInput {
  data: PuzzleUpdateWithoutAuthorInput!
  where: PuzzleWhereUniqueInput!
}

input PuzzleUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: JSON
  instances: PuzzleInstanceUpdateManyWithoutPuzzleInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PuzzleUpdateWithoutInstancesInput {
  author: UserUpdateOneRequiredWithoutPuzzlesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: JSON
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PuzzleUpsertWithWhereUniqueWithoutAuthorInput {
  create: PuzzleCreateWithoutAuthorInput!
  update: PuzzleUpdateWithoutAuthorInput!
  where: PuzzleWhereUniqueInput!
}

input PuzzleUpsertWithoutInstancesInput {
  create: PuzzleCreateWithoutInstancesInput!
  update: PuzzleUpdateWithoutInstancesInput!
}

input PuzzleWhereInput {
  AND: [PuzzleWhereInput!]
  NOT: [PuzzleWhereInput!]
  OR: [PuzzleWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  createdAt: DateTimeFilter
  description: JsonFilter
  id: IntFilter
  instances: PuzzleInstanceListRelationFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input PuzzleWhereUniqueInput {
  id: Int
  name: String
}

type Query {
  aggregatePuzzle(cursor: PuzzleWhereUniqueInput, orderBy: [PuzzleOrderByInput!], skip: Int, take: Int, where: PuzzleWhereInput): AggregatePuzzle!
  aggregatePuzzleInstance(cursor: PuzzleInstanceWhereUniqueInput, orderBy: [PuzzleInstanceOrderByInput!], skip: Int, take: Int, where: PuzzleInstanceWhereInput): AggregatePuzzleInstance!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstPuzzle(cursor: PuzzleWhereUniqueInput, distinct: [PuzzleScalarFieldEnum!], orderBy: [PuzzleOrderByInput!], skip: Int, take: Int, where: PuzzleWhereInput): Puzzle
  findFirstPuzzleInstance(cursor: PuzzleInstanceWhereUniqueInput, distinct: [PuzzleInstanceScalarFieldEnum!], orderBy: [PuzzleInstanceOrderByInput!], skip: Int, take: Int, where: PuzzleInstanceWhereInput): PuzzleInstance
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  getEncodedFzn(instanceMzn: String!, modelMzn: String!): String!
  getMznModelInfo(instanceMzn: String!, modelMzn: String!): MznModelInfo!
  puzzle(where: PuzzleWhereUniqueInput!): Puzzle
  puzzleInstance(where: PuzzleInstanceWhereUniqueInput!): PuzzleInstance
  puzzleInstances(cursor: PuzzleInstanceWhereUniqueInput, distinct: [PuzzleInstanceScalarFieldEnum!], orderBy: [PuzzleInstanceOrderByInput!], skip: Int, take: Int, where: PuzzleInstanceWhereInput): [PuzzleInstance!]!
  puzzles(cursor: PuzzleWhereUniqueInput, distinct: [PuzzleScalarFieldEnum!], orderBy: [PuzzleOrderByInput!], skip: Int, take: Int, where: PuzzleWhereInput): [Puzzle!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String
  id: String!
  name: String
  puzzleInstances(cursor: PuzzleInstanceWhereUniqueInput, distinct: [PuzzleInstanceScalarFieldEnum!], orderBy: [PuzzleInstanceOrderByInput!], skip: Int, take: Int, where: PuzzleInstanceWhereInput): [PuzzleInstance!]!
  puzzles(cursor: PuzzleWhereUniqueInput, distinct: [PuzzleScalarFieldEnum!], orderBy: [PuzzleOrderByInput!], skip: Int, take: Int, where: PuzzleWhereInput): [Puzzle!]!
}

type UserCountAggregate {
  _all: Int!
  email: Int
  id: Int
  name: Int
}

input UserCreateInput {
  email: String
  id: String!
  name: String
  puzzleInstances: PuzzleInstanceCreateNestedManyWithoutUserInput
  puzzles: PuzzleCreateNestedManyWithoutAuthorInput
}

input UserCreateNestedOneWithoutPuzzleInstancesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPuzzleInstancesInput
  create: UserCreateWithoutPuzzleInstancesInput
}

input UserCreateNestedOneWithoutPuzzlesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPuzzlesInput
  create: UserCreateWithoutPuzzlesInput
}

input UserCreateOrConnectWithoutPuzzleInstancesInput {
  create: UserCreateWithoutPuzzleInstancesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPuzzlesInput {
  create: UserCreateWithoutPuzzlesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPuzzleInstancesInput {
  email: String
  id: String!
  name: String
  puzzles: PuzzleCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutPuzzlesInput {
  email: String
  id: String!
  name: String
  puzzleInstances: PuzzleInstanceCreateNestedManyWithoutUserInput
}

type UserMaxAggregate {
  email: String
  id: String
  name: String
}

type UserMinAggregate {
  email: String
  id: String
  name: String
}

input UserOrderByInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  id
  name
}

input UserUpdateInput {
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  puzzleInstances: PuzzleInstanceUpdateManyWithoutUserInput
  puzzles: PuzzleUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPuzzlesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPuzzlesInput
  create: UserCreateWithoutPuzzlesInput
  update: UserUpdateWithoutPuzzlesInput
  upsert: UserUpsertWithoutPuzzlesInput
}

input UserUpdateOneWithoutPuzzleInstancesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPuzzleInstancesInput
  create: UserCreateWithoutPuzzleInstancesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPuzzleInstancesInput
  upsert: UserUpsertWithoutPuzzleInstancesInput
}

input UserUpdateWithoutPuzzleInstancesInput {
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  puzzles: PuzzleUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPuzzlesInput {
  email: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  puzzleInstances: PuzzleInstanceUpdateManyWithoutUserInput
}

input UserUpsertWithoutPuzzleInstancesInput {
  create: UserCreateWithoutPuzzleInstancesInput!
  update: UserUpdateWithoutPuzzleInstancesInput!
}

input UserUpsertWithoutPuzzlesInput {
  create: UserCreateWithoutPuzzlesInput!
  update: UserUpdateWithoutPuzzlesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  puzzleInstances: PuzzleInstanceListRelationFilter
  puzzles: PuzzleListRelationFilter
}

input UserWhereUniqueInput {
  id: String
}
